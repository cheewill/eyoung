%{
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "pop3.h"
#include "pop3_detect.h"
#include "ey_memory.h"

static int print_user_command(engine_work_event_t *event);
extern int print_pass_command(engine_work_event_t *event);

static ey_slab_t pop3_userdefined_slab;
%}

%output "pop3.eyc"
%file-init "pop3_init"
%import "libpop3_detect.so"

/*
 * SERVER SIDE EVENT
 */
%event "response_list" 				"void"
%event "response" 					"pop3_response_t *"
%event "positive_response" 			"pop3_response_t *"
%event "positive_response_line" 	"pop3_string_t"
%event "positive_response_message"	"pop3_res_content_t"
%event "positive_response_lines"	"pop3_res_content_t"
%event "negative_response" 			"pop3_response_t *"
%event "negative_response_line" 	"pop3_string_t"

/*
 * CLIENT SIDE EVENT
 */
%event "request_list" 				"void"
%event "noop_command" 				"pop3_request_t *"
%event "quit_command" 				"pop3_request_t *"
%event "uidl_command" 				"pop3_request_t *"
%event "top_command" 				"pop3_request_t *"
%event "rset_command" 				"pop3_request_t *"
%event "dele_command" 				"pop3_request_t *"
%event "retr_command" 				"pop3_request_t *"
%event "list_command" 				"pop3_request_t *"
%event "stat_command" 				"pop3_request_t *"
%event "apop_command" 				"pop3_request_t *"
%event "user_command" 				"pop3_request_t *"
%event "pass_command" 				"pop3_request_t *"
%event "unknown_command" 			"pop3_request_t *"
%event "request" 					"pop3_request_t *"
%event "request_args" 				"pop3_req_arg_list_t"

/*
 * REQUEST/RESPONSE PAIR
 * */
%event "cmd_pair"					"pop3_cmd_t *"

%%
1:user_command(print_user_command(_THIS_))
	{
		return print_user_command(_THIS_);
	}
	;

2:pass_command(print_pass_command(_THIS_))
	{
		return print_pass_command(_THIS_);
	}
	;
%%
int pop3_work_init_user(engine_work_t *work)
{
	assert(work->user_defined == NULL);
	pop3_userdefined_t *userdefined = ey_zalloc(pop3_userdefined_slab);
	if(!userdefined)
	{
		fprintf(stderr, ">>>>>>>>>>>>>>>>>pop3_work_init_user return -1\n");
		return -1;
	}
	userdefined->state = POP3_STATE_INIT;
	userdefined->cmd_failed = 0;
	userdefined->auth_failed = 0;
	work->user_defined = userdefined;

	fprintf(stderr, ">>>>>>>>>>>>>>>>>pop3_work_init_user return 0\n");
	return 0;
}

int pop3_work_finit_user(engine_work_t *work)
{
	if(work->user_defined)
	{
		ey_zfree(pop3_userdefined_slab, work->user_defined);
		fprintf(stderr, "free pop3 userdefined data\n");
	}
	fprintf(stderr, "<<<<<<<<<<<<<<<<<pop3_work_init_user return 0\n");
	return 0;
}

int pop3_finit(engine_t eng)
{
	if(pop3_userdefined_slab)
		ey_zfinit(pop3_userdefined_slab);
	fprintf(stderr, "<<<<<<<<<<<<<<<<<pop3_finit return 0\n");
	return 0;
}

int pop3_init(engine_t eng)
{
	pop3_userdefined_slab = ey_zinit("pop3 userdefined slab", sizeof(pop3_userdefined_t), NULL);
	if(!pop3_userdefined_slab)
	{
		fprintf(stderr, ">>>>>>>>>>>>>>>>>pop3_init return -1\n");
		return -1;
	}

	ey_add_file_finit(eng, pop3_finit);
	ey_set_userdefine_work_init(eng, pop3_work_init_user);
	ey_set_userdefine_work_finit(eng, pop3_work_finit_user);
	fprintf(stderr, ">>>>>>>>>>>>>>>>>pop3_init return 0\n");
	return 0;
}

static int print_user_command(engine_work_event_t *event)
{
	pop3_request_t *request = *(pop3_request_t**)(event->predefined);
	pop3_req_user_t *user_request = &request->user;
	char *buffer = (char*)malloc(user_request->len + 1);
	if(buffer)
	{
		memcpy(buffer, user_request->user, user_request->len);
		buffer[user_request->len] = '\0';
		fprintf(stderr, "user:=============%s\n", buffer);
		free(buffer);
	}
	return 1;
}

int print_pass_command(engine_work_event_t *event)
{
	pop3_request_t *request = *(pop3_request_t**)(event->predefined);
	pop3_req_pass_t *pass_request = &request->pass;
	char *buffer = (char*)malloc(pass_request->len + 1);
	if(buffer)
	{
		memcpy(buffer, pass_request->pass, pass_request->len);
		buffer[pass_request->len] = '\0';
		fprintf(stderr, "pass:=============%s\n", buffer);
		free(buffer);
	}
	return 1;
}
