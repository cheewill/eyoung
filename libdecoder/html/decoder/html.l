%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include "html.h"
#include "html_parser.h"
#include "html_private.h"

static int save_stream_context(yyscan_t yyscanner, int from_default);
#define YY_USER_ACTION									\
	if(yyg->yy_hold_char==YY_END_OF_BUFFER_CHAR &&		\
			save_stream_context(yyg,0))					\
		return SYM_LEX_CONTINUE;

#ifdef YY_RESTORE_YY_MORE_OFFSET
	#undef YY_RESTORE_YY_MORE_OFFSET
	#define YY_RESTORE_YY_MORE_OFFSET					\
	{													\
		if(save_stream_context(yyg,1))					\
			return SYM_LEX_CONTINUE;					\
	}
#endif

#ifdef HTML_DEBUG
#define YY_USER_INIT									\
	{													\
		yyout = stderr;									\
	}
#endif

#define RETURN(val)										\
	do													\
	{													\
		ey_html_debug(debug_html_lexer,					\
			"line %d get token %s\n",					\
			__LINE__, #val);							\
		return (val);									\
	}while(0)

#define GOTO(s)											\
	do													\
	{													\
		ey_html_debug(debug_html_lexer,					\
			"line %d goto state %s(%d)\n",				\
			__LINE__, #s, s);							\
		BEGIN s;										\
	}while(0)

#ifdef YY_FATAL_ERROR
#undef YY_FATAL_ERROR
#endif
#define YY_FATAL_ERROR(msg)								\
	do													\
	{													\
		ey_html_debug(debug_html_lexer,					\
			"line %d get fatal error: %s\n",			\
			__LINE__, msg);								\
		*(int*)0 = 0;									\
		yy_fatal_error(msg, yyscanner);					\
	}while(0)

%}

%option prefix="html_"
%option bison-bridge
%option outfile="html_lex.c"
%option header-file="html_lex.h"
%option noyywrap
%option reentrant
%option noyyalloc
%option noyyfree
%option noyyrealloc
%option caseless
%option noinput
%option ansi-definitions
%option extra-type="html_data_t *"

%x HTML_LEX_COMMENT
%x HTML_LEX_META
%x HTML_LEX_TAG_NAME
%x HTML_LEX_PROT_NAME
%x HTML_LEX_PROT_VALUE
%x HTML_LEX_PROT_VALUE_NOQUOTE
%x HTML_LEX_PROT_VALUE_DQUOTE
%x HTML_LEX_PROT_VALUE_SQUOTE
%x HTML_LEX_PROT_VALUE_RSQUOTE

SPACE			[ \t\r\n]*
HTML_CHARSET	[[:space:][:alnum:]\-_:<>=%]

%%
<INITIAL>{
"<!--"			{BEGIN HTML_LEX_COMMENT;}
"<!"			{BEGIN HTML_LEX_META;}
"</"			{BEGIN HTML_LEX_TAG_NAME; RETURN(SYM_TAG_START_FLAG2);}
"<"				{BEGIN HTML_LEX_TAG_NAME; RETURN(SYM_TAG_START_FLAG);}
[^<]+			{yylval->string.buf = yytext; yylval->string.len = yyleng; RETURN(SYM_TEXT);}
}

<HTML_LEX_COMMENT>{
"-->"			{BEGIN INITIAL;}
.				{/*eat all comment*/}
}

<HTML_LEX_META>{
">"				{BEGIN INITIAL;}
.				{/*eat all meta data*/}
}

<HTML_LEX_TAG_NAME>{
{SPACE}			{/*eat space*/}

"ABBR"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_ABBR);}
"ACRONYM"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_ACRONYM);}
"ADDRESS"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_ADDRESS);}
"APPLET"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_APPLET);}
"AREA"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_AREA);}
"ARTICLE"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_ARTICLE);}
"ASIDE"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_ASIDE);}
"AUDIO"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_AUDIO);}
"A"				{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_A);}
"BASEFONT"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_BASEFONT);}
"BASE"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_BASE);}
"BDI"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_BDI);}
"BDO"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_BDO);}
"BIG"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_BIG);}
"BLOCKQUOTE"	{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_BLOCKQUOTE);}
"BODY"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_BODY);}
"BR"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_BR);}
"BUTTON"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_BUTTON);}
"B"				{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_B);}
"CANVAS"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_CANVAS);}
"CAPTION"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_CAPTION);}
"CENTER"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_CENTER);}
"CITE"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_CITE);}
"CODE"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_CODE);}
"COLGROUP"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_COLGROUP);}
"COL"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_COL);}
"COMMAND"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_COMMAND);}
"DATALIST"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_DATALIST);}
"DD"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_DD);}
"DEL"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_DEL);}
"DETAILS"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_DETAILS);}
"DFN"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_DFN);}
"DIR"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_DIR);}
"DIV"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_DIV);}
"DL"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_DL);}
"DT"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_DT);}
"EM"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_EM);}
"EMBED"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_EMBED);}
"FIELDSET"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_FIELDSET);}
"FIGCAPTION"	{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_FIGCAPTION);}
"FIGURE"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_FIGURE);}
"FONT"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_FONT);}
"FOOTER"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_FOOTER);}
"FORM"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_FORM);}
"FRAME"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_FRAME);}
"FRAMESET"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_FRAMESET);}
"H1"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_H1);}
"H2"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_H2);}
"H3"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_H3);}
"H4"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_H4);}
"H5"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_H5);}
"H6"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_H6);}
"HEAD"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_HEAD);}
"HEADER"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_HEADER);}
"HGROUP"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_HGROUP);}
"HR"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_HR);}
"HTML"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_HTML);}
"IFRAME"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_IFRAME);}
"IMG"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_IMG);}
"INPUT"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_INPUT);}
"INS"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_INS);}
"I"				{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_I);}
"KEYGEN"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_KEYGEN);}
"KBD"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_KBD);}
"LABEL"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_LABEL);}
"LEGEND"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_LEGEND);}
"LAYER"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_LAYER);}
"LINK"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_LINK);}
"LI"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_LI);}
"MAP"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_MAP);}
"MARK"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_MARK);}
"MENU"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_MENU);}
"META"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_META);}
"METER"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_METER);}
"NAV"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_NAV);}
"NOFRAMES"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_NOFRAMES);}
"NOSCRIPT"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_NOSCRIPT);}
"OBJECT"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_OBJECT);}
"OL"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_OL);}
"OPTGROUP"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_OPTGROUP);}
"OPTION"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_OPTION);}
"OUTPUT"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_OUTPUT);}
"PARAM"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_PARAM);}
"PRE"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_PRE);}
"PROGRESS"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_PROGRESS);}
"P"				{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_P);}
"Q"				{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_Q);}
"RP"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_RP);}
"RT"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_RT);}
"RUBY"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_RUBY);}
"SAMP"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_SAMP);}
"SCRIPT"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_SCRIPT);}
"SECTION"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_SECTION);}
"SELECT"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_SELECT);}
"SMALL"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_SMALL);}
"SOURCE"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_SOURCE);}
"SPAN"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_SPAN);}
"STRIKE"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_STRIKE);}
"STRONG"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_STRONG);}
"STYLE"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_STYLE);}
"SUB"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_SUB);}
"SUMMARY"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_SUMMARY);}
"SUP"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_SUP);}
"S"				{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_S);}
"TABLE"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_TABLE);}
"TBODY"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_TBODY);}
"TD"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_TD);}
"TH"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_TH);}
"TR"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_TR);}
"TT"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_TT);}
"TEXTAREA"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_TEXTAREA);}
"TFOOT"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_TFOOT);}
"THEAD"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_THEAD);}
"TIME"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_TIME);}
"TITLE"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_TITLE);}
"UL"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_UL);}
"U"				{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_U);}
"VAR"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_VAR);}
"VIDEO"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_VIDEO);}
"XML"			{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_XML);}
"BGSOUND"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_BGSOUND);}
"MARQUEE"		{BEGIN HTML_LEX_PROT_NAME; RETURN(SYM_TAG_MARQUEE);}
[[:alnum:]]*	{BEGIN HTML_LEX_PROT_NAME; yylval->string.buf = yytext; yylval->string.len = yyleng; RETURN(SYM_TAG_USERDATA);}
.				{RETURN(-1); /*eat others*/}
}

<HTML_LEX_PROT_NAME>{
{SPACE}					/*eat space*/

"="						{BEGIN HTML_LEX_PROT_VALUE; RETURN(SYM_EQUAL);}

">"						{BEGIN INITIAL; RETURN(SYM_TAG_END_FLAG);}
"/"{SPACE}">"			{BEGIN INITIAL; RETURN(SYM_TAG_END_FLAG2);}
"/*".*"*/"				/*eat c-like comment*/

"ONAFTERPRINT"			{RETURN(SYM_EVT_ONAFTERPRINT);}
"ONBEFOREPRINT"			{RETURN(SYM_EVT_ONBEFOREPRINT);}
"ONBEFOREONLOAD"		{RETURN(SYM_EVT_ONBEFOREONLOAD);}
"ONBLUR"				{RETURN(SYM_EVT_ONBLUR);}
"ONFOCUS"				{RETURN(SYM_EVT_ONFOCUS);}
"ONHASCHANGE"			{RETURN(SYM_EVT_ONHASCHANGE);}
"ONLOAD"				{RETURN(SYM_EVT_ONLOAD);}
"ONMESSAGE"				{RETURN(SYM_EVT_ONMESSAGE);}
"ONOFFLINE"				{RETURN(SYM_EVT_ONOFFLINE);}
"ONONLINE"				{RETURN(SYM_EVT_ONONLINE);}
"ONPAGEHIDE"			{RETURN(SYM_EVT_ONPAGEHIDE);}
"ONPAGESHOW"			{RETURN(SYM_EVT_ONPAGESHOW);}
"ONPOPSTATE"			{RETURN(SYM_EVT_ONPOPSTATE);}
"ONREDO"				{RETURN(SYM_EVT_ONREDO);}
"ONRESIZE"				{RETURN(SYM_EVT_ONRESIZE);}
"ONSTORAGE"				{RETURN(SYM_EVT_ONSTORAGE);}
"ONUNDO"				{RETURN(SYM_EVT_ONUNDO);}
"ONUNLOAD"				{RETURN(SYM_EVT_ONUNLOAD);}
"ONCHANGE"				{RETURN(SYM_EVT_ONCHANGE);}
"ONCONTEXTMENU"			{RETURN(SYM_EVT_ONCONTEXTMENU);}
"ONFORMCHANGE"			{RETURN(SYM_EVT_ONFORMCHANGE);}
"ONFORMINPUT"			{RETURN(SYM_EVT_ONFORMINPUT);}
"ONINPUT"				{RETURN(SYM_EVT_ONINPUT);}
"ONINVALID"				{RETURN(SYM_EVT_ONINVALID);}
"ONRESET"				{RETURN(SYM_EVT_ONRESET);}
"ONSELECT"				{RETURN(SYM_EVT_ONSELECT);}
"ONSUBMIT"				{RETURN(SYM_EVT_ONSUBMIT);}
"ONKEYDOWN"				{RETURN(SYM_EVT_ONKEYDOWN);}
"ONKEYPRESS"			{RETURN(SYM_EVT_ONKEYPRESS);}
"ONKEYUP"				{RETURN(SYM_EVT_ONKEYUP);}
"ONCLICK"				{RETURN(SYM_EVT_ONCLICK);}
"ONDBLCLICK"			{RETURN(SYM_EVT_ONDBLCLICK);}
"ONDRAG"				{RETURN(SYM_EVT_ONDRAG);}
"ONDRAGEND"				{RETURN(SYM_EVT_ONDRAGEND);}
"ONDRAGENTER"			{RETURN(SYM_EVT_ONDRAGENTER);}
"ONDRAGLEAVE"			{RETURN(SYM_EVT_ONDRAGLEAVE);}
"ONDRAGOVER"			{RETURN(SYM_EVT_ONDRAGOVER);}
"ONDRAGSTART"			{RETURN(SYM_EVT_ONDRAGSTART);}
"ONDROP"				{RETURN(SYM_EVT_ONDROP);}
"ONMOUSEDOWN"			{RETURN(SYM_EVT_ONMOUSEDOWN);}
"ONMOUSEMOVE"			{RETURN(SYM_EVT_ONMOUSEMOVE);}
"ONMOUSEOUT"			{RETURN(SYM_EVT_ONMOUSEOUT);}
"ONMOUSEOVER"			{RETURN(SYM_EVT_ONMOUSEOVER);}
"ONMOUSEUP"				{RETURN(SYM_EVT_ONMOUSEUP);}
"ONMOUSEWHEEL"			{RETURN(SYM_EVT_ONMOUSEWHEEL);}
"ONSCROLL"				{RETURN(SYM_EVT_ONSCROLL);}
"ONABORT"				{RETURN(SYM_EVT_ONABORT);}
"ONCANPLAY"				{RETURN(SYM_EVT_ONCANPLAY);}
"ONCANPLAYTHROUGH"		{RETURN(SYM_EVT_ONCANPLAYTHROUGH);}
"ONDURATIONCHANGE"		{RETURN(SYM_EVT_ONDURATIONCHANGE);}
"ONEMPTIED"				{RETURN(SYM_EVT_ONEMPTIED);}
"ONENDED"				{RETURN(SYM_EVT_ONENDED);}
"ONERROR"				{RETURN(SYM_EVT_ONERROR);}
"ONLOADEDDATA"			{RETURN(SYM_EVT_ONLOADEDDATA);}
"ONLOADEDMETADATA"		{RETURN(SYM_EVT_ONLOADEDMETADATA);}
"ONLOADSTART"			{RETURN(SYM_EVT_ONLOADSTART);}
"ONPAUSE"				{RETURN(SYM_EVT_ONPAUSE);}
"ONPLAY"				{RETURN(SYM_EVT_ONPLAY);}
"ONPLAYING"				{RETURN(SYM_EVT_ONPLAYING);}
"ONPROGRESS"			{RETURN(SYM_EVT_ONPROGRESS);}
"ONRATECHANGE"			{RETURN(SYM_EVT_ONRATECHANGE);}
"ONREADYSTATECHANGE"	{RETURN(SYM_EVT_ONREADYSTATECHANGE);}
"ONSEEKED"				{RETURN(SYM_EVT_ONSEEKED);}
"ONSEEKING"				{RETURN(SYM_EVT_ONSEEKING);}
"ONSTALLED"				{RETURN(SYM_EVT_ONSTALLED);}
"ONSUSPEND"				{RETURN(SYM_EVT_ONSUSPEND);}
"ONTIMEUPDATE"			{RETURN(SYM_EVT_ONTIMEUPDATE);}
"ONVOLUMECHANGE"		{RETURN(SYM_EVT_ONVOLUMECHANGE);}
"ONWAITING"				{RETURN(SYM_EVT_ONWAITING);}
"ONSTART"				{RETURN(SYM_EVT_ONSTART);}

"ACCESSKEY"				{RETURN(SYM_PROT_ACCESSKEY);}
"CLASS"					{RETURN(SYM_PROT_CLASS);}
"CONTENTEDITABLE"		{RETURN(SYM_PROT_CONTENTEDITABLE);}
"CONTEXTMENU"			{RETURN(SYM_PROT_CONTEXTMENU);}
"DIR"					{RETURN(SYM_PROT_DIR);}
"DRAGGABLE"				{RETURN(SYM_PROT_DRAGGABLE);}
"HIDDEN"				{RETURN(SYM_PROT_HIDDEN);}
"ID"					{RETURN(SYM_PROT_ID);}
"ITEMPROP"				{RETURN(SYM_PROT_ITEMPROP);}
"ITEM"					{RETURN(SYM_PROT_ITEM);}
"LANG"					{RETURN(SYM_PROT_LANG);}
"SPELLCHECK"			{RETURN(SYM_PROT_SPELLCHECK);}
"STYLE"					{RETURN(SYM_PROT_STYLE);}
"SUBJECT"				{RETURN(SYM_PROT_SUBJECT);}
"TABINDEX"				{RETURN(SYM_PROT_TABINDEX);}
"TITLE"					{RETURN(SYM_PROT_TITLE);}
"TEMPLATE"				{RETURN(SYM_PROT_TEMPLATE);}
"REGISTRATIONMARK"		{RETURN(SYM_PROT_REGISTRATIONMARK);}
"IRRELEVANT"			{RETURN(SYM_PROT_IRRELEVANT);}

"OPEN"					{RETURN(SYM_PROT_OPEN);}
"DATA"					{RETURN(SYM_PROT_DATA);}
"NOWRAP"				{RETURN(SYM_PROT_NOWRAP);}
"DATETIME"				{RETURN(SYM_PROT_DATETIME);}
"ROWS"					{RETURN(SYM_PROT_ROWS);}
"LIST"					{RETURN(SYM_PROT_LIST);}
"FORMTARGETNEW"			{RETURN(SYM_PROT_FORMTARGETNEW);}
"AUTOFOCUSNEW"			{RETURN(SYM_PROT_AUTOFOCUSNEW);}
"ICON"					{RETURN(SYM_PROT_ICON);}
"MAXLENGTH"				{RETURN(SYM_PROT_MAXLENGTH);}
"WIDTH"					{RETURN(SYM_PROT_WIDTH);}
"ARCHIVE"				{RETURN(SYM_PROT_ARCHIVE);}
"HREF"					{RETURN(SYM_PROT_HREF);}
"PRELOAD"				{RETURN(SYM_PROT_PRELOAD);}
"MULTIPLE"				{RETURN(SYM_PROT_MULTIPLE);}
"HREFLANG"				{RETURN(SYM_PROT_HREFLANG);}
"CELLSPACING"			{RETURN(SYM_PROT_CELLSPACING);}
"COLSPAN"				{RETURN(SYM_PROT_COLSPAN);}
"ACTION"				{RETURN(SYM_PROT_ACTION);}
"CLASSID"				{RETURN(SYM_PROT_CLASSID);}
"PATTERN"				{RETURN(SYM_PROT_PATTERN);}
"COLOR"					{RETURN(SYM_PROT_COLOR);}
"HIGH"					{RETURN(SYM_PROT_HIGH);}
"PING"					{RETURN(SYM_PROT_PING);}
"ISMAP"					{RETURN(SYM_PROT_ISMAP);}
"HTTP-EQUIV"			{RETURN(SYM_PROT_HTTPEQUIV);}
"HSPACE"				{RETURN(SYM_PROT_HSPACE);}
"COMPACT"				{RETURN(SYM_PROT_COMPACT);}
"LANGUAGE"				{RETURN(SYM_PROT_LANGUAGE);}
"REQUIRED"				{RETURN(SYM_PROT_REQUIRED);}
"SPAN"					{RETURN(SYM_PROT_SPAN);}
"FORMACTIONNEW"			{RETURN(SYM_PROT_FORMACTIONNEW);}
"RULES"					{RETURN(SYM_PROT_RULES);}
"AXIS"					{RETURN(SYM_PROT_AXIS);}
"METHOD"				{RETURN(SYM_PROT_METHOD);}
"BGCOLOR"				{RETURN(SYM_PROT_BGCOLOR);}
"SHAPE"					{RETURN(SYM_PROT_SHAPE);}
"USEMAP"				{RETURN(SYM_PROT_USEMAP);}
"FOR"					{RETURN(SYM_PROT_FOR);}
"SCOPED"				{RETURN(SYM_PROT_SCOPED);}
"FORMACTION"			{RETURN(SYM_PROT_FORMACTION);}
"FORMENCTYPE"			{RETURN(SYM_PROT_FORMENCTYPE);}
"FORMMETHOD"			{RETURN(SYM_PROT_FORMMETHOD);}
"FORMTARGET"			{RETURN(SYM_PROT_FORMTARGET);}
"FORMNOVALIDATE"		{RETURN(SYM_PROT_FORMNOVALIDATE);}
"FORMNOVALIDATENEW"		{RETURN(SYM_PROT_FORMNOVALIDATENEW);}
"CONTENT"				{RETURN(SYM_PROT_CONTENT);}
"INPUTMODE"				{RETURN(SYM_PROT_INPUTMODE);}
"CITE"					{RETURN(SYM_PROT_CITE);}
"VSPACE"				{RETURN(SYM_PROT_VSPACE);}
"XMLNS"					{RETURN(SYM_PROT_XMLNS);}
"CODETYPE"				{RETURN(SYM_PROT_CODETYPE);}
"TARGET"				{RETURN(SYM_PROT_TARGET);}
"VALUE"					{RETURN(SYM_PROT_VALUE);}
"AUTOFOCUS"				{RETURN(SYM_PROT_AUTOFOCUS);}
"MEDIA"					{RETURN(SYM_PROT_MEDIA);}
"COORDS"				{RETURN(SYM_PROT_COORDS);}
"PROFILE"				{RETURN(SYM_PROT_PROFILE);}
"HEADERS"				{RETURN(SYM_PROT_HEADERS);}
"VALUETYPE"				{RETURN(SYM_PROT_VALUETYPE);}
"REPLACE"				{RETURN(SYM_PROT_REPLACE);}
"MARGINHEIGHT"			{RETURN(SYM_PROT_MARGINHEIGHT);}
"BORDER"				{RETURN(SYM_PROT_BORDER);}
"FRAMEBORDER"			{RETURN(SYM_PROT_FRAMEBORDER);}
"ASYNC"					{RETURN(SYM_PROT_ASYNC);}
"FACE"					{RETURN(SYM_PROT_FACE);}
"CELLPADDING"			{RETURN(SYM_PROT_CELLPADDING);}
"STANDBY"				{RETURN(SYM_PROT_STANDBY);}
"ALT"					{RETURN(SYM_PROT_ALT);}
"ACCEPT-CHARSET"		{RETURN(SYM_PROT_ACCEPTCHARSET);}
"FORMMETHODNEW"			{RETURN(SYM_PROT_FORMMETHODNEW);}
"AUTOPLAY"				{RETURN(SYM_PROT_AUTOPLAY);}
"REV"					{RETURN(SYM_PROT_REV);}
"LOOP"					{RETURN(SYM_PROT_LOOP);}
"CODE"					{RETURN(SYM_PROT_CODE);}
"SRC"					{RETURN(SYM_PROT_SRC);}
"CHECKED"				{RETURN(SYM_PROT_CHECKED);}
"SCROLLING"				{RETURN(SYM_PROT_SCROLLING);}
"SCOPE"					{RETURN(SYM_PROT_SCOPE);}
"DEFER"					{RETURN(SYM_PROT_DEFER);}
"XML:SPACE"				{RETURN(SYM_PROT_XMLSPACE);}
"CHALLENGE"				{RETURN(SYM_PROT_CHALLENGE);}
"SCHEME"				{RETURN(SYM_PROT_SCHEME);}
"DECLARE"				{RETURN(SYM_PROT_DECLARE);}
"CHAR"					{RETURN(SYM_PROT_CHAR);}
"READONLY"				{RETURN(SYM_PROT_READONLY);}
"XML:LANG"				{RETURN(SYM_PROT_XMLLANG);}
"MAX"					{RETURN(SYM_PROT_MAX);}
"ROWSPAN"				{RETURN(SYM_PROT_ROWSPAN);}
"KEYTYPE"				{RETURN(SYM_PROT_KEYTYPE);}
"AUTOCOMPLETE"			{RETURN(SYM_PROT_AUTOCOMPLETE);}
"SELECTED"				{RETURN(SYM_PROT_SELECTED);}
"CODEBASE"				{RETURN(SYM_PROT_CODEBASE);}
"STEP"					{RETURN(SYM_PROT_STEP);}
"NOHREF"				{RETURN(SYM_PROT_NOHREF);}
"CHARSET"				{RETURN(SYM_PROT_CHARSET);}
"FORMNEW"				{RETURN(SYM_PROT_FORMNEW);}
"FORMENCTYPENEW"		{RETURN(SYM_PROT_FORMENCTYPENEW);}
"REL"					{RETURN(SYM_PROT_REL);}
"MIN"					{RETURN(SYM_PROT_MIN);}
"NAME"					{RETURN(SYM_PROT_NAME);}
"TYPE"					{RETURN(SYM_PROT_TYPE);}
"NOSHADE"				{RETURN(SYM_PROT_NOSHADE);}
"MANIFEST"				{RETURN(SYM_PROT_MANIFEST);}
"ALIGN"					{RETURN(SYM_PROT_ALIGN);}
"HEIGHT"				{RETURN(SYM_PROT_HEIGHT);}
"ACCEPT"				{RETURN(SYM_PROT_ACCEPT);}
"ENCTYPE"				{RETURN(SYM_PROT_ENCTYPE);}
"DISABLED"				{RETURN(SYM_PROT_DISABLED);}
"CONTROLS"				{RETURN(SYM_PROT_CONTROLS);}
"LONGDESC"				{RETURN(SYM_PROT_LONGDESC);}
"MARGINWIDTH"			{RETURN(SYM_PROT_MARGINWIDTH);}
"NORESIZE"				{RETURN(SYM_PROT_NORESIZE);}
"COLS"					{RETURN(SYM_PROT_COLS);}
"SIZE"					{RETURN(SYM_PROT_SIZE);}
"RADIOGROUP"			{RETURN(SYM_PROT_RADIOGROUP);}
"VALIGN"				{RETURN(SYM_PROT_VALIGN);}
"OBJECT"				{RETURN(SYM_PROT_OBJECT);}
"CHAROFF"				{RETURN(SYM_PROT_CHAROFF);}
"LOW"					{RETURN(SYM_PROT_LOW);}
"START"					{RETURN(SYM_PROT_START);}
"SUMMARY"				{RETURN(SYM_PROT_SUMMARY);}
"OPTIMUM"				{RETURN(SYM_PROT_OPTIMUM);}
"ABBR"					{RETURN(SYM_PROT_ABBR);}
"FORM"					{RETURN(SYM_PROT_FORM);}
"LABEL"					{RETURN(SYM_PROT_LABEL);}
"FRAME"					{RETURN(SYM_PROT_FRAME);}
"ALLOWSCRIPTACCESS"		{RETURN(SYM_PROT_ALLOWSCRIPTACCESS);}
"PLACEHOLDER"			{RETURN(SYM_PROT_PLACEHOLDER);}
"AUTOSUBMIT"			{RETURN(SYM_PROT_AUTOSUBMIT);}
"LOWSRC"				{RETURN(SYM_PROT_LOWSRC);}
"BACKGROUND"			{RETURN(SYM_PROT_BACKGROUND);}

[[:alnum:]]*			{yylval->string.buf = yytext; yylval->string.len = yyleng; RETURN(SYM_PROT_USERDATA);}
.						{/*eat others*/}
}

<HTML_LEX_PROT_VALUE>{
{SPACE}					/*eat space*/
"\""					{BEGIN HTML_LEX_PROT_VALUE_DQUOTE;}
"'"						{BEGIN HTML_LEX_PROT_VALUE_SQUOTE;}
"`"						{BEGIN HTML_LEX_PROT_VALUE_RSQUOTE;}
.						{BEGIN HTML_LEX_PROT_VALUE_NOQUOTE; unput(yytext[0]);}
}

<HTML_LEX_PROT_VALUE_DQUOTE>{
[^\"]*\"				{BEGIN HTML_LEX_PROT_NAME; yytext[yyleng-1]=0; yylval->string.buf = yytext; yylval->string.len = yyleng-1; RETURN(SYM_TEXT);}
.						{RETURN(-1);}
}

<HTML_LEX_PROT_VALUE_SQUOTE>{
[^']*'					{BEGIN HTML_LEX_PROT_NAME; yytext[yyleng-1]=0; yylval->string.buf = yytext; yylval->string.len = yyleng-1; RETURN(SYM_TEXT);}
.						{RETURN(-1);}
}

<HTML_LEX_PROT_VALUE_RSQUOTE>{
[^`]*`					{BEGIN HTML_LEX_PROT_NAME; yytext[yyleng-1]=0; yylval->string.buf = yytext; yylval->string.len = yyleng-1; RETURN(SYM_TEXT);}
.						{RETURN(-1);}
}

<HTML_LEX_PROT_VALUE_NOQUOTE>{
[^[:space:]<>]*			{BEGIN HTML_LEX_PROT_NAME; yylval->string.buf = yytext; yylval->string.len = yyleng; RETURN(SYM_TEXT);}
.						{BEGIN HTML_LEX_PROT_NAME; unput(yytext[0]);}
}

%%
void *html_alloc (yy_size_t sz,yyscan_t yyscanner )
{
	return ey_html_malloc(sz);
}

void *html_realloc (void *ptr,yy_size_t sz,yyscan_t yyscanner )
{
	return ey_html_realloc(ptr, sz);
}

void html_free (void *ptr ,yyscan_t yyscanner )
{
	ey_html_free(ptr);
}

struct yy_buffer_state* html_scan_stream(const char *new_buf, size_t new_buf_len, html_data_t *priv)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, _yybytes_len;
	char *last_buf = priv->parser.saved;
	size_t last_buf_len = priv->parser.saved_len;
	yyscan_t scanner = (yyscan_t)priv->parser.lexier;
    
	_yybytes_len = new_buf_len + last_buf_len;
	n = _yybytes_len + 2;
	buf = (char *)html_alloc(n, scanner);
	if (!buf)
	{
		ey_html_debug(debug_html_lexer, "out of dynamic memory in html_scan_stream()\n");
		return NULL;
	}

	if(last_buf)
		memcpy(buf, last_buf, last_buf_len);
	
	if(new_buf)
		memcpy(buf+last_buf_len, new_buf, new_buf_len);

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
	ey_html_debug(debug_html_lexer, "[HTML]: %s\n", buf);

	b = (YY_BUFFER_STATE)html_alloc(sizeof(struct yy_buffer_state), scanner);
	if ( ! b )
	{
		ey_html_debug(debug_html_lexer, "failed to alloc html buffer state\n");
		html_free(buf, scanner);
		return NULL;
	}

	b->yy_buf_size = n - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = buf;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;
	html_switch_to_buffer(b, scanner);

	b->yy_is_our_buffer = 1;

	if(priv->parser.saved)
	{
		html_free(priv->parser.saved, scanner);
		priv->parser.saved = NULL;
		priv->parser.saved_len = 0;
	}
	return b;
}

static int save_stream_context(yyscan_t yyscanner, int from_default)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	html_data_t *priv = (html_data_t*)html_get_extra(yyg);
	int len = 0;

	if(priv->parser.saved)
	{
		html_free(priv->parser.saved, yyg);
		priv->parser.saved = NULL;
		priv->parser.saved_len = 0;
	}

	if(!priv || priv->parser.last_frag || (!from_default && !priv->parser.greedy))
	{
		ey_html_debug(debug_html_lexer, "No need to save stream context, priv: %p, last_frag: %d, from_default: %d\n",
			priv, priv?priv->parser.last_frag:0, from_default);
		return 0;
	}

	len = from_default?yyleng-1:yyleng;
	if(!len)
	{
		ey_html_debug(debug_html_lexer, "Exit save stream context for ZERO length yytext\n");
		return 1;
	}

	priv->parser.saved = html_alloc(len, yyg);
	if(!priv->parser.saved)
	{
		ey_html_debug(debug_html_lexer, "out of memory while saving context\n");
		return 0;
	}
	memcpy(priv->parser.saved, yytext, len);
	priv->parser.saved_len = len;
	ey_html_debug(debug_html_lexer, "Save stream context, string: %s, len: %d\n", yytext, len);
	return 1;
}
